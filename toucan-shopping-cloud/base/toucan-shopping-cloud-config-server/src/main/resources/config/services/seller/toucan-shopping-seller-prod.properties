#========================商户服务 开发环境====================================


# mybatis
mybatis.type-aliases-package=com.toucan.shopping.*.entity
mybatis.configuration.map-underscore-to-camel-case=true
mybatis.configuration.default-fetch-size=100
mybatis.configuration.default-statement-timeout=3000
mybatis.mapperLocations=classpath*:com/toucan/**/mapper/*Mapper.xml
#sql打印控制台
mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl



# shardingsphere

spring.shardingsphere.props.sql-show=true
spring.shardingsphere.datasource.names=ds0,ds1,ds2

spring.shardingsphere.datasource.common.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.common.type=com.alibaba.druid.pool.DruidDataSource


spring.shardingsphere.datasource.ds0.url=jdbc:mysql://rm-2ze33642t0ju9a897oo.mysql.rds.aliyuncs.com:3306/toucan_shopping_seller_0?useSSL=false&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.ds0.username=toucan_shopping_majian000
spring.shardingsphere.datasource.ds0.password=mj_toucan_shopping_7612
spring.shardingsphere.datasource.ds0.initial-size=20
spring.shardingsphere.datasource.ds0.min-idle=20
spring.shardingsphere.datasource.ds0.maxActive=30
spring.shardingsphere.datasource.ds0.maxWait=60000
spring.shardingsphere.datasource.ds0.timeBetweenEvictionRunsMillis=60000
spring.shardingsphere.datasource.ds0.minEvictableIdleTimeMillis=300000
spring.shardingsphere.datasource.ds0.validationQuery=SELECT 1 
spring.shardingsphere.datasource.ds0.testWhileIdle=true
spring.shardingsphere.datasource.ds0.testOnBorrow=false
spring.shardingsphere.datasource.ds0.testOnReturn=false
spring.shardingsphere.datasource.ds0.poolPreparedStatements=true
spring.shardingsphere.datasource.ds0.maxPoolPreparedStatementPerConnectionSize=20


spring.shardingsphere.datasource.ds1.url=jdbc:mysql://rm-2ze33642t0ju9a897oo.mysql.rds.aliyuncs.com:3306/toucan_shopping_seller_1?useSSL=false&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.ds1.username=toucan_shopping_majian000
spring.shardingsphere.datasource.ds1.password=mj_toucan_shopping_7612
spring.shardingsphere.datasource.ds1.initial-size=20
spring.shardingsphere.datasource.ds1.min-idle=20
spring.shardingsphere.datasource.ds1.maxActive=30
spring.shardingsphere.datasource.ds1.maxWait=60000
spring.shardingsphere.datasource.ds1.timeBetweenEvictionRunsMillis=60000
spring.shardingsphere.datasource.ds1.minEvictableIdleTimeMillis=300000
spring.shardingsphere.datasource.ds1.validationQuery=SELECT 1 
spring.shardingsphere.datasource.ds1.testWhileIdle=true
spring.shardingsphere.datasource.ds1.testOnBorrow=false
spring.shardingsphere.datasource.ds1.testOnReturn=false
spring.shardingsphere.datasource.ds1.poolPreparedStatements=true
spring.shardingsphere.datasource.ds1.maxPoolPreparedStatementPerConnectionSize=20


spring.shardingsphere.datasource.ds2.url=jdbc:mysql://rm-2ze33642t0ju9a897oo.mysql.rds.aliyuncs.com:3306/toucan_shopping_seller_2?useSSL=false&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.ds2.username=toucan_shopping_majian000
spring.shardingsphere.datasource.ds2.password=mj_toucan_shopping_7612
spring.shardingsphere.datasource.ds2.initial-size=20
spring.shardingsphere.datasource.ds2.min-idle=20
spring.shardingsphere.datasource.ds2.maxActive=30
spring.shardingsphere.datasource.ds2.maxWait=60000
spring.shardingsphere.datasource.ds2.timeBetweenEvictionRunsMillis=60000
spring.shardingsphere.datasource.ds2.minEvictableIdleTimeMillis=300000
spring.shardingsphere.datasource.ds2.validationQuery=SELECT 1 
spring.shardingsphere.datasource.ds2.testWhileIdle=true
spring.shardingsphere.datasource.ds2.testOnBorrow=false
spring.shardingsphere.datasource.ds2.testOnReturn=false
spring.shardingsphere.datasource.ds2.poolPreparedStatements=true
spring.shardingsphere.datasource.ds2.maxPoolPreparedStatementPerConnectionSize=20



spring.shardingsphere.rules.sharding.sharding-algorithms.database-sharding-algorithms.props.instance-name=sellerService
spring.shardingsphere.rules.sharding.sharding-algorithms.table-sharding-algorithms.props.instance-name=sellerService

spring.shardingsphere.rules.sharding.key-generators.snowflake.type=SNOWFLAKE
spring.shardingsphere.rules.sharding.key-generators.snowflake.props.worker-id=100

#分库 Long分片
spring.shardingsphere.rules.sharding.sharding-algorithms.database-sharding-algorithms.type=DBLongAlgorithm
spring.shardingsphere.rules.sharding.sharding-algorithms.database-sharding-algorithms.props.num=3

#分表 Long分片
spring.shardingsphere.rules.sharding.sharding-algorithms.table-sharding-algorithms.type=TableLongAlgorithm
spring.shardingsphere.rules.sharding.sharding-algorithms.table-sharding-algorithms.props.num=3


# 分库策略
#用主键做分库
spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-column=user_main_id
#指定自定义分库实现类
spring.shardingsphere.rules.sharding.default-database-strategy.standard.sharding-algorithm-name=database-sharding-algorithms



#分表策略
# t_seller_shop分表
# t_seller_shop_0,t_seller_shop_1（自定义分表算法）
spring.shardingsphere.rules.sharding.tables.t_seller_shop.actual-data-nodes=ds$->{0..2}.t_seller_shop_$->{0..2}
spring.shardingsphere.rules.sharding.tables.t_seller_shop.table-strategy.standard.sharding-column=id
#自定义分表实现类
spring.shardingsphere.rules.sharding.tables.t_seller_shop.table-strategy.standard.sharding-algorithm-name=table-sharding-algorithms
spring.shardingsphere.rules.sharding.tables.t_seller_shop.database-strategy.standard.sharding-column=id
spring.shardingsphere.rules.sharding.tables.t_seller_shop.database-strategy.standard.sharding-algorithm-name=database-sharding-algorithms


# t_seller_login_history分表
# t_seller_login_history_0,t_seller_login_history_1（自定义分表算法）
spring.shardingsphere.rules.sharding.tables.t_seller_login_history.actual-data-nodes=ds$->{0..2}.t_seller_login_history_$->{0..2}
spring.shardingsphere.rules.sharding.tables.t_seller_login_history.table-strategy.standard.sharding-column=user_main_id
#自定义分表实现类
spring.shardingsphere.rules.sharding.tables.t_seller_login_history.table-strategy.standard.sharding-algorithm-name=table-sharding-algorithms


# t_shop_category分表
# t_shop_category_0,t_shop_category_1（自定义分表算法）
spring.shardingsphere.rules.sharding.tables.t_shop_category.actual-data-nodes=ds$->{0..2}.t_shop_category_$->{0..2}
spring.shardingsphere.rules.sharding.tables.t_shop_category.table-strategy.standard.sharding-column=shop_id
#自定义分表实现类
spring.shardingsphere.rules.sharding.tables.t_shop_category.table-strategy.standard.sharding-algorithm-name=table-sharding-algorithms
spring.shardingsphere.rules.sharding.tables.t_shop_category.database-strategy.standard.sharding-column=shop_id
spring.shardingsphere.rules.sharding.tables.t_shop_category.database-strategy.standard.sharding-algorithm-name=database-sharding-algorithms


# t_freight_template分表
# t_freight_template_0,t_freight_template_1（自定义分表算法）
spring.shardingsphere.rules.sharding.tables.t_freight_template.actual-data-nodes=ds$->{0..2}.t_freight_template_$->{0..2}
spring.shardingsphere.rules.sharding.tables.t_freight_template.table-strategy.standard.sharding-column=shop_id
#自定义分表实现类
spring.shardingsphere.rules.sharding.tables.t_freight_template.table-strategy.standard.sharding-algorithm-name=table-sharding-algorithms
spring.shardingsphere.rules.sharding.tables.t_freight_template.database-strategy.standard.sharding-column=shop_id
spring.shardingsphere.rules.sharding.tables.t_freight_template.database-strategy.standard.sharding-algorithm-name=database-sharding-algorithms


# t_freight_template_default_rule分表
# t_freight_template_default_rule_0,t_freight_template_default_rule_1（自定义分表算法）
spring.shardingsphere.rules.sharding.tables.t_freight_template_default_rule.actual-data-nodes=ds$->{0..2}.t_freight_template_default_rule_$->{0..2}
spring.shardingsphere.rules.sharding.tables.t_freight_template_default_rule.table-strategy.standard.sharding-column=shop_id
#自定义分表实现类
spring.shardingsphere.rules.sharding.tables.t_freight_template_default_rule.table-strategy.standard.sharding-algorithm-name=table-sharding-algorithms
spring.shardingsphere.rules.sharding.tables.t_freight_template_default_rule.database-strategy.standard.sharding-column=shop_id
spring.shardingsphere.rules.sharding.tables.t_freight_template_default_rule.database-strategy.standard.sharding-algorithm-name=database-sharding-algorithms


# t_freight_template_area_rule分表
# t_freight_template_area_rule_0,t_freight_template_area_rule_1（自定义分表算法）
spring.shardingsphere.rules.sharding.tables.t_freight_template_area_rule.actual-data-nodes=ds$->{0..2}.t_freight_template_area_rule_$->{0..2}
spring.shardingsphere.rules.sharding.tables.t_freight_template_area_rule.table-strategy.standard.sharding-column=shop_id
#自定义分表实现类
spring.shardingsphere.rules.sharding.tables.t_freight_template_area_rule.table-strategy.standard.sharding-algorithm-name=table-sharding-algorithms
spring.shardingsphere.rules.sharding.tables.t_freight_template_area_rule.database-strategy.standard.sharding-column=shop_id
spring.shardingsphere.rules.sharding.tables.t_freight_template_area_rule.database-strategy.standard.sharding-algorithm-name=database-sharding-algorithms


# t_shop_banner分表
# t_shop_banner_0,t_shop_banner_1（自定义分表算法）
spring.shardingsphere.rules.sharding.tables.t_shop_banner.actual-data-nodes=ds$->{0..2}.t_shop_banner_$->{0..2}
spring.shardingsphere.rules.sharding.tables.t_shop_banner.table-strategy.standard.sharding-column=shop_id
#自定义分表实现类
spring.shardingsphere.rules.sharding.tables.t_shop_banner.table-strategy.standard.sharding-algorithm-name=table-sharding-algorithms
spring.shardingsphere.rules.sharding.tables.t_shop_banner.database-strategy.standard.sharding-column=shop_id
spring.shardingsphere.rules.sharding.tables.t_shop_banner.database-strategy.standard.sharding-algorithm-name=database-sharding-algorithms


# t_seller_designer_page_model分表
# t_seller_designer_page_model_0,t_seller_designer_page_model_1（自定义分表算法）
spring.shardingsphere.rules.sharding.tables.t_seller_designer_page_model.actual-data-nodes=ds$->{0..2}.t_seller_designer_page_model_$->{0..2}
spring.shardingsphere.rules.sharding.tables.t_seller_designer_page_model.table-strategy.standard.sharding-column=shop_id
#自定义分表实现类
spring.shardingsphere.rules.sharding.tables.t_seller_designer_page_model.table-strategy.standard.sharding-algorithm-name=table-sharding-algorithms
spring.shardingsphere.rules.sharding.tables.t_seller_designer_page_model.database-strategy.standard.sharding-column=shop_id
spring.shardingsphere.rules.sharding.tables.t_seller_designer_page_model.database-strategy.standard.sharding-algorithm-name=database-sharding-algorithms

#logback
logging.level.com.toucan=debug





#kafka
spring.kafka.producer.bootstrap-servers=127.0.0.1:9092
spring.kafka.producer.retries=1
spring.kafka.producer.batch-size=16384
spring.kafka.producer.buffer-memory=33554432
spring.kafka.producer.properties.max.requst.size=2097152
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer


spring.kafka.consumer.bootstrap-servers=127.0.0.1:9092
spring.kafka.consumer.group-id=product_consumer_1
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer









#elasticsearch
spring.data.elasticsearch.cluster-name=elasticsearch
spring.data.elasticsearch.cluster-nodes=127.0.0.1:9200
spring.data.elasticsearch.connectTimeout=5000
spring.data.elasticsearch.socketTimeout=5000
spring.data.elasticsearch.connectionRequestTimeout=5000
spring.data.elasticsearch.maxConnectNum=100
spring.data.elasticsearch.maxConnectPerRoute=100
spring.data.elasticsearch.UserName=elastic
spring.data.elasticsearch.Password=toucp_5432






