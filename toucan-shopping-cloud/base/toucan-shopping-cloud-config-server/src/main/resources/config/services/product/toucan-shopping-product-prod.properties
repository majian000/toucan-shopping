#========================商品服务 开发环境====================================


# mybatis
mybatis.type-aliases-package=com.toucan.shopping.*.entity
mybatis.configuration.map-underscore-to-camel-case=true
mybatis.configuration.default-fetch-size=100
mybatis.configuration.default-statement-timeout=3000
mybatis.mapperLocations=classpath*:com/toucan/**/mapper/*Mapper.xml
#sql打印控制台
mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl



# shardingsphere

# shardingsphere

spring.shardingsphere.datasource.names=ds0,ds1,ds2


spring.shardingsphere.datasource.ds0.url=jdbc:mysql://rm-2ze33642t0ju9a897oo.mysql.rds.aliyuncs.com:3306/toucan_shopping_product_0?useSSL=false&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.username=toucan_shopping_majian000
spring.shardingsphere.datasource.ds0.password=mj_toucan_shopping_7612
spring.shardingsphere.datasource.ds0.initial-size=20
spring.shardingsphere.datasource.ds0.min-idle=20
spring.shardingsphere.datasource.ds0.maxActive=30
spring.shardingsphere.datasource.ds0.maxWait=60000
spring.shardingsphere.datasource.ds0.timeBetweenEvictionRunsMillis=60000
spring.shardingsphere.datasource.ds0.minEvictableIdleTimeMillis=300000
spring.shardingsphere.datasource.ds0.validationQuery=SELECT 1
spring.shardingsphere.datasource.ds0.testWhileIdle=true
spring.shardingsphere.datasource.ds0.testOnBorrow=false
spring.shardingsphere.datasource.ds0.testOnReturn=false
spring.shardingsphere.datasource.ds0.poolPreparedStatements=true
spring.shardingsphere.datasource.ds0.maxPoolPreparedStatementPerConnectionSize=20


spring.shardingsphere.datasource.ds1.url=jdbc:mysql://rm-2ze33642t0ju9a897oo.mysql.rds.aliyuncs.com:3306/toucan_shopping_product_1?useSSL=false&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1.username=toucan_shopping_majian000
spring.shardingsphere.datasource.ds1.password=mj_toucan_shopping_7612
spring.shardingsphere.datasource.ds1.initial-size=20
spring.shardingsphere.datasource.ds1.min-idle=20
spring.shardingsphere.datasource.ds1.maxActive=30
spring.shardingsphere.datasource.ds1.maxWait=60000
spring.shardingsphere.datasource.ds1.timeBetweenEvictionRunsMillis=60000
spring.shardingsphere.datasource.ds1.minEvictableIdleTimeMillis=300000
spring.shardingsphere.datasource.ds1.validationQuery=SELECT 1
spring.shardingsphere.datasource.ds1.testWhileIdle=true
spring.shardingsphere.datasource.ds1.testOnBorrow=false
spring.shardingsphere.datasource.ds1.testOnReturn=false
spring.shardingsphere.datasource.ds1.poolPreparedStatements=true
spring.shardingsphere.datasource.ds1.maxPoolPreparedStatementPerConnectionSize=20


spring.shardingsphere.datasource.ds2.url=jdbc:mysql://rm-2ze33642t0ju9a897oo.mysql.rds.aliyuncs.com:3306/toucan_shopping_product_2?useSSL=false&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.ds2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds2.username=toucan_shopping_majian000
spring.shardingsphere.datasource.ds2.password=mj_toucan_shopping_7612
spring.shardingsphere.datasource.ds2.initial-size=20
spring.shardingsphere.datasource.ds2.min-idle=20
spring.shardingsphere.datasource.ds2.maxActive=30
spring.shardingsphere.datasource.ds2.maxWait=60000
spring.shardingsphere.datasource.ds2.timeBetweenEvictionRunsMillis=60000
spring.shardingsphere.datasource.ds2.minEvictableIdleTimeMillis=300000
spring.shardingsphere.datasource.ds2.validationQuery=SELECT 1
spring.shardingsphere.datasource.ds2.testWhileIdle=true
spring.shardingsphere.datasource.ds2.testOnBorrow=false
spring.shardingsphere.datasource.ds2.testOnReturn=false
spring.shardingsphere.datasource.ds2.poolPreparedStatements=true
spring.shardingsphere.datasource.ds2.maxPoolPreparedStatementPerConnectionSize=20



# 分库策略
#用主键做分库
spring.shardingsphere.sharding.default-database-strategy.standard.sharding-column=id
#指定自定义分库实现类
spring.shardingsphere.sharding.default-database-strategy.standard.precise-algorithm-class-name=com.toucan.shopping.cloud.product.shardingsphere.select.database.DefaultDBAlgorithm


#分表策略
# t_attribute_key分表
# t_attribute_key_0,t_attribute_key_1（自定义分表算法）
spring.shardingsphere.sharding.tables.t_attribute_key.actual-data-nodes=ds$->{0..2}.t_attribute_key_$->{0..1}
spring.shardingsphere.sharding.tables.t_attribute_key.table-strategy.standard.sharding-column=id
#自定义分表实现类
spring.shardingsphere.sharding.tables.t_attribute_key.table-strategy.standard.precise-algorithm-class-name=com.toucan.shopping.cloud.product.shardingsphere.select.table.DefaultTableAlgorithm



#分表策略
# t_attribute_value分表
# t_attribute_value_0,t_attribute_value_1（自定义分表算法）
spring.shardingsphere.sharding.tables.t_attribute_value.actual-data-nodes=ds$->{0..2}.t_attribute_value_$->{0..1}
spring.shardingsphere.sharding.tables.t_attribute_value.table-strategy.standard.sharding-column=attribute_key_id
#自定义分表实现类
spring.shardingsphere.sharding.tables.t_attribute_value.table-strategy.standard.precise-algorithm-class-name=com.toucan.shopping.cloud.product.shardingsphere.select.table.DefaultTableAlgorithm


#分表策略
# t_brand分表
# t_brand_0,t_brand_1（自定义分表算法）
spring.shardingsphere.sharding.tables.t_brand.actual-data-nodes=ds$->{0..2}.t_brand_$->{0..1}
spring.shardingsphere.sharding.tables.t_brand.table-strategy.standard.sharding-column=id
#自定义分表实现类
spring.shardingsphere.sharding.tables.t_brand.table-strategy.standard.precise-algorithm-class-name=com.toucan.shopping.cloud.product.shardingsphere.select.table.DefaultTableAlgorithm


#分表策略
# t_brand_category分表
# t_brand_category_0,t_brand_category_1（自定义分表算法）
spring.shardingsphere.sharding.tables.t_brand_category.actual-data-nodes=ds$->{0..2}.t_brand_category_$->{0..1}
spring.shardingsphere.sharding.tables.t_brand_category.table-strategy.standard.sharding-column=brand_id
#自定义分表实现类
spring.shardingsphere.sharding.tables.t_brand_category.table-strategy.standard.precise-algorithm-class-name=com.toucan.shopping.cloud.product.shardingsphere.select.table.DefaultTableAlgorithm





#分表策略
# t_product_sku分表
# t_product_sku_0,t_product_sku_1（自定义分表算法）
spring.shardingsphere.sharding.tables.t_product_sku.actual-data-nodes=ds$->{0..2}.t_product_sku_$->{0..1}
spring.shardingsphere.sharding.tables.t_product_sku.table-strategy.standard.sharding-column=shop_product_id
#自定义分表实现类
spring.shardingsphere.sharding.tables.t_product_sku.table-strategy.standard.precise-algorithm-class-name=com.toucan.shopping.cloud.product.shardingsphere.select.table.DefaultTableAlgorithm


#分表策略
# t_shop_product分表
# t_shop_product_0,t_shop_product_1（自定义分表算法）
spring.shardingsphere.sharding.tables.t_shop_product.actual-data-nodes=ds$->{0..2}.t_shop_product_$->{0..1}
spring.shardingsphere.sharding.tables.t_shop_product.table-strategy.standard.sharding-column=id
#自定义分表实现类
spring.shardingsphere.sharding.tables.t_shop_product.table-strategy.standard.precise-algorithm-class-name=com.toucan.shopping.cloud.product.shardingsphere.select.table.DefaultTableAlgorithm


#分表策略
# t_product_spu分表
spring.shardingsphere.sharding.tables.t_product_spu.actual-data-nodes=ds$->{0..2}.t_product_spu_$->{0..1}
spring.shardingsphere.sharding.tables.t_product_spu.table-strategy.standard.sharding-column=id
#自定义分表实现类
spring.shardingsphere.sharding.tables.t_product_spu.table-strategy.standard.precise-algorithm-class-name=com.toucan.shopping.cloud.product.shardingsphere.select.table.DefaultTableAlgorithm


#分表策略
# t_shop_product_approve_record分表
spring.shardingsphere.sharding.tables.t_shop_product_approve_record.actual-data-nodes=ds$->{0..2}.t_shop_product_approve_record_$->{0..1}
spring.shardingsphere.sharding.tables.t_shop_product_approve_record.table-strategy.standard.sharding-column=approve_id
#自定义分表实现类
spring.shardingsphere.sharding.tables.t_shop_product_approve_record.table-strategy.standard.precise-algorithm-class-name=com.toucan.shopping.cloud.product.shardingsphere.select.table.DefaultTableAlgorithm


#分表策略
# t_shop_product_img分表
spring.shardingsphere.sharding.tables.t_shop_product_img.actual-data-nodes=ds$->{0..2}.t_shop_product_img_$->{0..1}
spring.shardingsphere.sharding.tables.t_shop_product_img.table-strategy.standard.sharding-column=shop_product_id
#自定义分表实现类
spring.shardingsphere.sharding.tables.t_shop_product_img.table-strategy.standard.precise-algorithm-class-name=com.toucan.shopping.cloud.product.shardingsphere.select.table.DefaultTableAlgorithm





#logback
logging.level.com.toucan=debug





#kafka
spring.kafka.producer.bootstrap-servers=127.0.0.1:9092
spring.kafka.producer.retries=1
spring.kafka.producer.batch-size=16384
spring.kafka.producer.buffer-memory=33554432
spring.kafka.producer.properties.max.requst.size=2097152
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer


spring.kafka.consumer.bootstrap-servers=127.0.0.1:9092
spring.kafka.consumer.group-id=product_consumer_1
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer




