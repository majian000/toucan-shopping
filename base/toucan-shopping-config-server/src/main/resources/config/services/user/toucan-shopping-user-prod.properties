#========================用户中心服务 开发环境====================================


# mybatis
mybatis.type-aliases-package=com.toucan.shopping.*.entity
mybatis.configuration.map-underscore-to-camel-case=true
mybatis.configuration.default-fetch-size=100
mybatis.configuration.default-statement-timeout=3000
mybatis.mapperLocations=classpath*:com/toucan/**/mapper/*Mapper.xml
#sql打印控制台
mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl


# pagehelper
pagehelper.helperDialect=mysql
pagehelper.reasonable=true
pagehelper.supportMethodsArguments=true
pagehelper.params=count=countSql
pagehelper.page-size-zero=true


# shardingsphere

spring.shardingsphere.datasource.names=ds0,ds1,ds2


spring.shardingsphere.datasource.ds0.url=jdbc:mysql://rm-2ze33642t0ju9a897oo.mysql.rds.aliyuncs.com:3306/toucan_shopping_user_0?useSSL=false&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.ds0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds0.username=toucan_shopping_majian000
spring.shardingsphere.datasource.ds0.password=mj_toucan_shopping_7612


spring.shardingsphere.datasource.ds1.url=jdbc:mysql://rm-2ze33642t0ju9a897oo.mysql.rds.aliyuncs.com:3306/toucan_shopping_user_1?useSSL=false&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.ds1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds1.username=toucan_shopping_majian000
spring.shardingsphere.datasource.ds1.password=mj_toucan_shopping_7612


spring.shardingsphere.datasource.ds2.url=jdbc:mysql://rm-2ze33642t0ju9a897oo.mysql.rds.aliyuncs.com:3306/toucan_shopping_user_2?useSSL=false&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Shanghai
spring.shardingsphere.datasource.ds2.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.ds2.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.ds2.username=toucan_shopping_majian000
spring.shardingsphere.datasource.ds2.password=mj_toucan_shopping_7612

# 分库策略
#用主键做分库
spring.shardingsphere.sharding.default-database-strategy.standard.sharding-column=user_main_id
#指定自定义分库实现类
spring.shardingsphere.sharding.default-database-strategy.standard.precise-algorithm-class-name=com.toucan.shopping.user.shardingsphere.select.database.DefaultDBAlgorithm



#分表策略
# t_user分表
# t_user_0,t_user_1（自定义分表算法）
spring.shardingsphere.sharding.tables.t_user.actual-data-nodes=ds$->{0..2}.t_user_$->{0..1}
spring.shardingsphere.sharding.tables.t_user.table-strategy.standard.sharding-column=user_main_id
#自定义分表实现类
spring.shardingsphere.sharding.tables.t_user.table-strategy.standard.precise-algorithm-class-name=com.toucan.shopping.user.shardingsphere.select.table.UserTableAlgorithm



# t_user_detail分表
# t_user_detail分表_0,t_user_detail分表_1（自定义分表算法）
spring.shardingsphere.sharding.tables.t_user_detail.actual-data-nodes=ds$->{0..2}.t_user_detail_$->{0..1}
spring.shardingsphere.sharding.tables.t_user_detail.table-strategy.standard.sharding-column=user_main_id
#自定义分表实现类
spring.shardingsphere.sharding.tables.t_user_detail.table-strategy.standard.precise-algorithm-class-name=com.toucan.shopping.user.shardingsphere.select.table.UserDetailTableAlgorithm



# t_user_mobile_phone分表
# t_user_mobile_phone_0,t_user_mobile_phone_1（自定义分表算法）
spring.shardingsphere.sharding.tables.t_user_mobile_phone.actual-data-nodes=ds$->{0..2}.t_user_mobile_phone_$->{0..1}
spring.shardingsphere.sharding.tables.t_user_mobile_phone.table-strategy.standard.sharding-column=user_main_id
#自定义分表实现类
spring.shardingsphere.sharding.tables.t_user_mobile_phone.table-strategy.standard.precise-algorithm-class-name=com.toucan.shopping.user.shardingsphere.select.table.UserMobilePhoneTableAlgorithm




# t_user_username分表
# t_user_username_0,t_user_username_1（自定义分表算法）
spring.shardingsphere.sharding.tables.t_user_username.actual-data-nodes=ds$->{0..2}.t_user_username_$->{0..1}
spring.shardingsphere.sharding.tables.t_user_username.table-strategy.standard.sharding-column=user_main_id
#自定义分表实现类
spring.shardingsphere.sharding.tables.t_user_username.table-strategy.standard.precise-algorithm-class-name=com.toucan.shopping.user.shardingsphere.select.table.UserUserNameTableAlgorithm



# t_user_email分表
# t_user_email_0,t_user_email_1（自定义分表算法）
spring.shardingsphere.sharding.tables.t_user_email.actual-data-nodes=ds$->{0..2}.t_user_email_$->{0..1}
spring.shardingsphere.sharding.tables.t_user_email.table-strategy.standard.sharding-column=user_main_id
#自定义分表实现类
spring.shardingsphere.sharding.tables.t_user_email.table-strategy.standard.precise-algorithm-class-name=com.toucan.shopping.user.shardingsphere.select.table.UserEmailTableAlgorithm





#logback
logging.level.com.toucan=debug





#kafka
spring.kafka.producer.bootstrap-servers=127.0.0.1:9092
spring.kafka.producer.retries=1
spring.kafka.producer.batch-size=16384
spring.kafka.producer.buffer-memory=33554432
spring.kafka.producer.properties.max.requst.size=2097152
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer


spring.kafka.consumer.bootstrap-servers=127.0.0.1:9092
spring.kafka.consumer.group-id=product_consumer_1
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer







#redis
spring.redis.host=127.0.0.1
spring.redis.port=6379
spring.redis.password=mj_tocan_redis_7612
spring.redis.timeout=0


